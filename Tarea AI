;; TAREA 1

;; Imprime un Ã¡rbol por niveles (breath-first)
(defun niveles(tree)
(cond 
((null tree))((atom (car tree))(prin1 (car tree))(niveles (cdr tree)))
(t (print " ")(niveles (remove-if #'listp (car tree)))(print " ")(niveles (apply #'append (remove-if #'atom (car tree)))))))


;; Invierte una lista a profundidad
(defun invertir (tree)
(cond 
((null tree))((atom (car tree))(invertir (cdr tree)))
(t (rplaca tree (reverse (car tree))) (invertir (car tree)) (invertir (cdr tree)))))


(defun invertir (tree)
(cond
((null tree))
((atom (car tree)) () (invertir tree))
(t (invertir (car tree)))

